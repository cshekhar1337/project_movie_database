''' Generates web page with help of themoviedb api, fresh_tomatoes and Movie class '''
import media            # contains blueprint of Movie object 
import fresh_tomatoes   # generate webpage based on the list of Movie object passed to it 
try:
    import requests     # required for executing https get request.  
except ImportError:
    print("""You need to install package "requests". Run "pip2.7 install requests" .""")


api_key = '662b71c718794021ce82b81fc195f823' # Api key for themoviedb api version 3


def generateURL_Movie_List():          # generate url using "/discover" mode. It generates list of 20 movies which have release date > 2005 and list is sorted by vote_count
    return 'https://api.themoviedb.org/3/discover/movie?api_key=' + api_key +'&language=en-US&release_date.gte=2005&sort_by=vote_count.desc&include_adult=false&page=1'

def generateURL_Youtube_Link(id):  # generate youtube url based on movie id passed to the method.
    req = 'https://api.themoviedb.org/3/movie/' + str(id) + '?api_key='+ api_key + '&append_to_response=videos'
    response = requests.get(req).json()
    youtubeid = response['videos']['results'][0]['key']  # get the first link . [0] is first link
    youtubeLink = 'https://www.youtube.com/watch?v=' + youtubeid
    return youtubeLink

def generateURL_Poster(poster_path): # generate url of the movie poster. the image is scaled to 300
    return 'https://image.tmdb.org/t/p/w300' + poster_path


def get_Movie_Object(result):   # returns Movie object. Extract movie title, poster url, youtube url from the json "result" and intialize movie object
    title = result['original_title']

    poster_image_url = generateURL_Poster(result['poster_path'])

    trailer_youtube_url = generateURL_Youtube_Link(result['id'])

    return media.Movie(title, poster_image_url ,trailer_youtube_url)




def create_Movie_Objects_List(): # generate movie object list
 
    movie = []                   # empty list which is going to store Movie objects
    requestUrl = generateURL_Movie_List()
    print(requestUrl)
    response = requests.get(requestUrl).json()   # json result generated by request
    results = response['results']                # get list of movie_informations. results store this list.
   
    for index,result in enumerate(results, 1):   # loop over results. Here result stores the information of a single movie

        print('Processing.........Fetching Data for movie ' + str(index))

        movie.append(get_Movie_Object(result))

  
    print('All Data Fetched... ')

    return movie





movie = create_Movie_Objects_List() # movie stores list of Movie Objects
print('Generating web page')
fresh_tomatoes.open_movies_page(movie) # generate web page based on Movie Object list.


